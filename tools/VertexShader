#version 330 core

layout(location = 0) in vec3 vertex_pos_ms;
layout(location = 1) in vec2 vertex_uv_ms;
layout(location = 2) in vec3 vertex_normal_ms;

out vec3 vertex_ws;
out vec3 vertex_normal_cs;
out vec3 vertex_origin_dir_cs;
out vec3 vertex_sun_dir_cs;
out vec2 uv;
out vec3 scatter_angles;
out float vertex_distance;

uniform mat4 MVP;
uniform mat4 M;
uniform mat4 V;
uniform vec3 sun_ws;
uniform vec3 vertex_offset_ws;

void main(){

    gl_Position = MVP * vec4(vertex_pos_ms, 1);

    vertex_ws = (M * vec4(vertex_pos_ms,1)).xyz;

    vec3 vertex_pos_cs = ( V * M * vec4(vertex_pos_ms,1)).xyz;
    vertex_origin_dir_cs = vec3(0,0,0) - vertex_pos_cs;
    vertex_distance = length(vertex_pos_cs);

    vec3 sun_cs = ( V * vec4(sun_ws,1)).xyz;
    vertex_sun_dir_cs = sun_cs + vertex_origin_dir_cs;

    vertex_normal_cs = ( V * M * vec4(vertex_normal_ms,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
    uv = vertex_uv_ms;

    vec3 up_n_cs = normalize((V * M * vec4(vertex_ws + vertex_offset_ws,0)).xyz);
    vec3 origin_vertex_dir_n_cs = -normalize(vertex_origin_dir_cs);
    vec3 sun_n_cs = normalize(sun_cs);
    float scatter_view_angle = acos(dot(up_n_cs, origin_vertex_dir_n_cs))/3.1415927*7.0/16.0+0.03125;
    float scatter_sun_angle_vertical = acos(dot(up_n_cs, sun_n_cs))/3.1415927*7.0/16.0+0.03125;
    float scatter_sun_angle_horizontal = acos(dot(cross(up_n_cs, origin_vertex_dir_n_cs), cross(up_n_cs, sun_n_cs)))/3.1415927*7.0/16.0+0.03125;
    scatter_angles = vec3(scatter_sun_angle_horizontal, scatter_sun_angle_vertical, scatter_view_angle);

}

